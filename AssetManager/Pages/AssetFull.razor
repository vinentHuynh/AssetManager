@page "/AssetFull"

@inject Model.Asset asset
@inject NavigationManager NavigationManager
@using AssetManager.Model
@using FastMember

<div class=" main">
    <div class="assetNum mb-6">
        <h1>Asset @asset.id</h1>
    </div>
    
    <div class="table-actions">
        <div class="table-actions-1">
            <a href="/asset" class="btn btn-primary" title="Go back to asset">Back</a>
        </div>
        <div  class="table-actions-2">
            <button type="button" class="btn btn-primary" @onclick="() => editAsset()">Edit</button>
            <button type="button" class="btn btn-danger" @onclick="() => deleteModalShow()">Delete</button>
        </div>
    </div>

    <div class="container-fluid table-container">

        <div class="row row-cols-1 row-cols-md-2 text-center g-4">
            
            @for (int i = 0; i < fields.Count; i++)
            {
                string fieldName = fields[i].Key;

                <div class="col">

                    <table class="table">
                        <thead>
                            <tr>
                                <th>@fields[i].Value</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>@accessor[asset, fieldName]</td>
                            </tr>
                        </tbody>
                    </table>

                </div>
            }

        </div>

    </div>

</div>

@if (showDelete)
{
    <div class="modal fade show" style="display:block; background-color: rgba(10,10,10,.6);" aria-modal="true" role="dialog" @onclick="@deleteModalCancel">
        <div class="modal-dialog" @onclick:stopPropagation="true">
            <div class="modal-content">

                <!-- Modal header -->
                <div class="modal-header">
                    <h4 class="modal-title">Confirm Delete</h4>
                    <button type="button" class="btn btn-sm" @onclick="@deleteModalCancel"><span class="oi oi-x"></span></button>
                </div>

                <!-- Modal body -->
                <div class="modal-body">
                    <p>Are you sure you wish to delete the following asset?</p>
                    <p>@asset.id - @asset.name</p>
                </div>

                <!-- Modal footer -->
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" @onclick=@deleteModalOk>Delete</button>
                    <button type="button" class="btn" @onclick="@deleteModalCancel">Cancel</button>
                </div>

            </div>
        </div>
    </div>
}

@code {
    List<KeyValuePair<string, string>> fields = new List<KeyValuePair<string, string>>();
    static Type type = typeof(Asset);
    TypeAccessor accessor = TypeAccessor.Create(type);
    bool showDelete = false;

    protected override async Task OnInitializedAsync()
    {
        fields.Add(new KeyValuePair<string, string>("id", "ID"));
        fields.Add(new KeyValuePair<string, string>("name", "Name"));
        fields.Add(new KeyValuePair<string, string>("description", "Description"));
        fields.Add(new KeyValuePair<string, string>("location_id", "Location"));
        fields.Add(new KeyValuePair<string, string>("status_id", "Status"));
        fields.Add(new KeyValuePair<string, string>("type_id", "Type"));
        fields.Add(new KeyValuePair<string, string>("manufacturer", "Manufacturer"));
        fields.Add(new KeyValuePair<string, string>("model", "Model"));
        fields.Add(new KeyValuePair<string, string>("serial_number", "Serial Number"));
        fields.Add(new KeyValuePair<string, string>("purchase_date", "Purchase Date"));
        fields.Add(new KeyValuePair<string, string>("warranty_expiration", "Warranty Expiration"));
        fields.Add(new KeyValuePair<string, string>("estimated_life", "Estimated Life"));
        fields.Add(new KeyValuePair<string, string>("purchase_price", "Purchase Price"));
        fields.Add(new KeyValuePair<string, string>("comments", "Comments"));
        fields.Add(new KeyValuePair<string, string>("item_count", "Item Count"));
        fields.Add(new KeyValuePair<string, string>("created", "Created"));
        fields.Add(new KeyValuePair<string, string>("created_by", "Created By"));
        fields.Add(new KeyValuePair<string, string>("updated_by", "Updated By"));
        fields.Add(new KeyValuePair<string, string>("last_updated", "Last Updated"));
        fields.Add(new KeyValuePair<string, string>("photo_url", "Photo URL"));
        fields.Add(new KeyValuePair<string, string>("path", "Path"));
        fields.Add(new KeyValuePair<string, string>("borrow", "Borrowable"));

        asset = await AssetService.GetAssetById(asset.id);
    }

    void editAsset()
    {
        this.asset.id = asset.id;
        NavigationManager.NavigateTo("/AssetEdit");
    }

    void deleteModalShow() => showDelete = true;

    void deleteModalCancel() => showDelete = false;

    void deleteModalOk()
    {
        AssetService.DeleteAsset(this.asset);
        showDelete = false;
        NavigationManager.NavigateTo("/Admin/Asset");
    }
}
