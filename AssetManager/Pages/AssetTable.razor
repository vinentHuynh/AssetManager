@page "/Asset"
@page "/Admin/Asset"

@inject IJSRuntime JsRuntime
@attribute [Authorize]
@using Microsoft.Data.SqlClient
@using System.Data
@using AssetManager.Model
@using AssetManager.Classes
@inject NavigationManager NavigationManager
@inject Asset asset
@inject UserModel user
@inject CustomAuthenticationProvider AuthStateProvider

<div class="main container-sm">
   <h1 class="text-center">Assets</h1> 
    <div class="input-group mb-3 align justify-content-end">
          <AuthorizeView Roles="Admin">
            <div class="mx-3">
                <button type="submit" class=" btn btn-primary " @onclick="addAsset">Add Asset</button>
            </div>
          </AuthorizeView>
     
        <input type="text" placeholder="Search" @bind-value="search"/>
        <button type="submit" class="btn btn-primary "@onclick="searchFilter">Search</button>
    </div>
</div>


    
<div class="container-sm table-responsive">
    
     
    <div class="table-responsive ">
        <table class="table table-bordered table-hover">

            <thead>

                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Manufacturer</th>
                    <th>Model</th>
                    <th>Details</th>
                    <th>Maintenance</th>
                    <th>Borrow</th>
                </tr>

            </thead>


            <tbody class="table-group-divider">

                @foreach (DataRow dr in dt.Rows)
                {
                    @if (dr.ItemArray[5].ToString() == "1" || dr.ItemArray[5].ToString() == "7")
                    {
                        isDisabledMaintenance = false;
                    }
                    else
                    {
                        isDisabledMaintenance = true;
                    }
                    @if (Convert.ToBoolean(dr.ItemArray[6]) == true && dr.ItemArray[5].ToString() == "1")
                    {
                        isDisabledBorrow = false;
                    }
                    else
                    {
                        isDisabledBorrow = true;
                    }
                    <tr>
                        @for (int i = 0; i < 5; i++)
                        {
                            <td>
                                @dr.ItemArray[i]
                            </td>
                                   
                        }
                        <td style="text-align:center"><button type="button" class="btn btn-outline-secondary" @onclick="() => fullAsset(dr.ItemArray[0])"><span class="oi oi-magnifying-glass"></span></button></td>
                        <td style="text-align:center"><button type="button" class="btn btn-outline-primary" @onclick="() => maintenance(dr.ItemArray[0], dr.ItemArray[1])" disabled="@isDisabledMaintenance"><span class="oi oi-tag"></span></button></td>
                        <td style="text-align:center"><button type="button" class="btn btn-outline-warning" @onclick="() => borrow(dr.ItemArray[0], dr.ItemArray[1])" disabled="@isDisabledBorrow"><span class="oi oi-list-rich"></span></button></td>
                    </tr>
                }

            </tbody>


        </table>
        
    </div>
    
</div>

@if (showMaintenance)
{
    <div class="modal fade show" style="display:block; background-color: rgba(10,10,10,.6);" aria-modal="true" role="dialog" @onclick="@maintenanceModalCancel">
        <div class="modal-dialog" @onclick:stopPropagation="true">
            <div class="modal-content">

                <!-- Modal header -->
                <div class="modal-header">
                    <h4 class="modal-title">Create Maintenance Request</h4>
                    <button type="button" class="btn btn-sm" @onclick="@maintenanceModalCancel"><span class="oi oi-x"></span></button>
                </div>

                <!-- Modal body -->
                <div class="modal-body">
                    <p>Enter a description for maintenance on the following asset:</p>
                    <p>@asset.id - @asset.name</p>
                    <textarea rows="5" cols="60" maxlength="300" @bind=description></textarea>
                </div>

                <!-- Modal footer -->
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick=@maintenanceModalOk>Submit</button>
                    <button type="button" class="btn" @onclick="@maintenanceModalCancel">Cancel</button>
                </div>

            </div>
        </div>
    </div>
}

@if (showBorrow)
{
    <div class="modal fade show" style="display:block; background-color: rgba(10,10,10,.6);" aria-modal="true" role="dialog" @onclick="@borrowModalCancel">
        <div class="modal-dialog" @onclick:stopPropagation="true">
            <div class="modal-content">

                <!-- Modal header -->
                <div class="modal-header">
                    <h4 class="modal-title">Create Borrow Request</h4>
                    <button type="button" class="btn btn-sm" @onclick="@borrowModalCancel"><span class="oi oi-x"></span></button>
                </div>

                <!-- Modal body -->
                <div class="modal-body">
                    <p>Enter any comments to request to borrow the following asset:</p>
                    <p>@asset.id - @asset.name</p>
                    <textarea rows="5" cols="60" maxlength="300" @bind=comments></textarea>
                </div>

                <!-- Modal footer -->
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick=@borrowModalOk>Submit</button>
                    <button type="button" class="btn" @onclick="@borrowModalCancel">Cancel</button>
                </div>

            </div>
        </div>
    </div>
}



@code {
    bool showMaintenance = false;
    bool showBorrow = false;
    bool isDisabledMaintenance = true;
    bool isDisabledBorrow = false;
    string description = "";
    string comments = "";

    UserModel curUser = new UserModel();

    private ConnectionDB connection = new ConnectionDB();
    DataTable dt = new DataTable();
    string search = "";
    string query = "select id,name,description,manufacturer,model,status_id,borrow from dbo.asset where deleted = 0";
    protected override async void OnInitialized()
    {
        user = await UserService.GetUserByEmail(user.email);

        connection.OpenConnection();
        dt = connection.ShowDataInGridView(query).Tables[0];
    }

    void fullAsset(object id)
    {
        this.asset.id = Int32.Parse(id.ToString());
        NavigationManager.NavigateTo("/AssetFull");
    }

    void maintenance(object id, object name)
    {
        this.asset.id = Int32.Parse(id.ToString());
        this.asset.name = name.ToString();
        showMaintenance = true;
    }

    void maintenanceModalCancel() => showMaintenance = false;

    void maintenanceModalOk()
    {
        MaintenanceService.CreateMaintenanceRequest(this.asset.id, this.user.id, description);
        showMaintenance = false;
        getRole();
        if(curUser.role == 0)
            NavigationManager.NavigateTo("/Maintenance");
    }

    void borrow(object id, object name)
    {
        this.asset.id = Int32.Parse(id.ToString());
        this.asset.name = name.ToString();
        showBorrow = true;
    }

    void borrowModalCancel() => showBorrow = false;

    void borrowModalOk()
    {
        BorrowHistoryService.CreateBorrowRequest(this.user.id, this.asset.id, comments);
        showBorrow= false;
        getRole();
        if (curUser.role == 0)
            NavigationManager.NavigateTo("/Borrow_history");
    }

    void addAsset()
    {
        getRole();
        if (curUser.role == 0)
            NavigationManager.NavigateTo("/AssetAdd");
    }

    
    async void getRole(){
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        curUser.email = user.Identity.Name;     
        ConnectionDB connection = new ConnectionDB();
        connection.OpenConnection();
        string query = "SELECT role FROM dbo.[user] WHERE email='" + curUser.email + "'";
        Microsoft.Data.SqlClient.SqlDataReader dr = connection.DataReader(query);
        while (dr.Read())
            curUser.role = dr.GetInt32(0);
        connection.CloseConnection();
    }

    void searchFilter()
    {
        query = "select id,name,description,manufacturer,model from dbo.asset where name like '" + search + "%'" 
        + "or id like '" + search + "%'"
        + "or description like '" + search + "%'" 
        + "or model like '" + search + "%'" 
        + "or manufacturer like '" + search + "%'";
        OnInitialized();
    }
}