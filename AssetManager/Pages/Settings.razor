@page "/settings"
@page "/Admin/Settings"

@using AssetManager.Model
@using System.Collections.Generic;
@inject IJSRuntime JsRuntime


@*ToDO: 
    - create dark mode 
    - create text size 
    - create brightness
    - create text weight
    - create reset button
    - 
*@

<div class="main mt-2 ">
    <div class="main-content ">

        <form class="mb-3">
          

            <div class="mb-3">
                <label class="mb-2 form-label">Text size</label>
                <select @onchange="ChangeTextSize" class="form-select" >

                    @foreach(var item in textSizes){
                        <option selected="@isTextSizeSelected(item)" value="@item">@item</option>
                    }
                </select>
               
            </div>

            <div class="mb-3">
                <label class="mb-2 form-label">Text Style</label>
                <select @oninput="ChangeTextStyle" class="form-select">

                    @foreach (var item in textStyles)
                    {
                        <option selected="@isTextStyleSelected(item)" value="@item">@item</option>
                    }
                </select>

            </div>

            <div class="mb-3">
                <label class="mb-2 form-label">Font Weight</label>
                <input type="range" value="@get_textWeight" class="form-range" min="300" max="1000" step="100" @onchange="ChangeFontWeight" />
            </div>
            
            <div class="mb-3">
                <label class="form-label">Brightness</label>
                <input type="range" value="@get_brightness" class="form-range" min="20" max="100" step="1" @oninput="ChangeBrightness"/>

            </div>

            <div class="mb-3">

                <label class="form-label">Theme</label>
                <select @onchange="ChangeTheme"  class="form-select">
                    @foreach (var item in themes) {
                        <option selected="@isThemeSelected(item)" value="@item">@item</option>
                    }

                </select>
            </div>



            <button class="btn btn-primary" @onclick="ResetSetting">Reset</button>
        </form>

       
     


    </div>

 

</div>


@code {


    private List<string> textSizes = new List<string> {"default", "fs-1", "fs-2", "fs-3", "fs-4", "fs-5", "fs-6" };
    private List<string> textStyles = new List<string> { "default", "Arial ,sans-serif", "Cambria", "Verdana ,sans-serif", "Noto", "Comic Sans MS, cursive", "Tahoma ,sans-serif", "Trebuchet MS ,sans-serif", "Times New Roman ,serif", "Georgia ,serif", "Garamond serif", " Courier New monospace", " Brush Script MT, cursive", "Poor Story, cursive", "Ubuntu, sans-serif", "Dancing Script, cursive" };
    private List<string> themes = new List<string> { "light", "dark-mode" };
    @*--------------------------------------- TEXT SIZE ------------------------------------*@


    protected override async Task OnInitializedAsync(){
        var textSizeFromLocalStorage = await JsRuntime.InvokeAsync<string>("readLocalStorage", "textSize");
        var textStyleFromLocalStorage = await JsRuntime.InvokeAsync<string>("readLocalStorage", "fontStyle");
        var brightnessFromlocalStorage = await JsRuntime.InvokeAsync<string>("readLocalStorage", "brightness");
        var textWeightFromLocalStorage = await JsRuntime.InvokeAsync<string>("readLocalStorage", "fontWeight");
        var darkModeFromLocalStorage = await JsRuntime.InvokeAsync<string>("readLocalStorage", "dark-mode");

        if (!string.IsNullOrEmpty(textSizeFromLocalStorage)) {
            await JsRuntime.InvokeVoidAsync("textSize", textSizeFromLocalStorage);
            get_TextSize = textSizeFromLocalStorage;
        }

        if (!string.IsNullOrEmpty(textStyleFromLocalStorage))
        {
            await JsRuntime.InvokeVoidAsync("readFontStyle", textStyleFromLocalStorage);
            get_textStyle = textStyleFromLocalStorage;
        }

        if (!string.IsNullOrEmpty(brightnessFromlocalStorage))
        {
            await JsRuntime.InvokeVoidAsync("readBrightness", brightnessFromlocalStorage);
            get_brightness = Convert.ToInt32(brightnessFromlocalStorage);
        }

        if (!string.IsNullOrEmpty(textWeightFromLocalStorage)) {
            await JsRuntime.InvokeVoidAsync("readFontWeight", textWeightFromLocalStorage);
            get_textWeight = Convert.ToInt32(textWeightFromLocalStorage);
        }

        if (!string.IsNullOrEmpty(darkModeFromLocalStorage))
        {
            await JsRuntime.InvokeVoidAsync("readTheme", darkModeFromLocalStorage);
            get_theme = darkModeFromLocalStorage;
        }
    }


    private string get_TextSize { get; set; }

    private bool isTextSizeSelected (string text){
        return text == get_TextSize;
    }

    private async Task ChangeTextSize (ChangeEventArgs e){
        await JsRuntime.InvokeVoidAsync("textSize", e.Value.ToString());
    }
    /*-------------------------------------------------------------------------*/


    // font family----------------------------------

    private string get_textStyle { get; set; }
    private bool isTextStyleSelected(string text)
    {
        return text == get_textStyle;
    }

    private async Task ChangeTextStyle(ChangeEventArgs e)
    {
        await JsRuntime.InvokeVoidAsync("readFontStyle", e.Value.ToString());
    }

    // ----------- end ---------------------


    // reset button ---------------
    private async Task ResetSetting(){
        await JsRuntime.InvokeVoidAsync("resetSetting");
    }
    // ----------- end ---------------------

    // Brightness
    private int get_brightness { get; set; } 
    private async Task ChangeBrightness(ChangeEventArgs e){
        await JsRuntime.InvokeVoidAsync("readBrightness", e.Value.ToString());
    }


    // Text font weight ----------------------

    private int get_textWeight { get; set; }

    private async Task ChangeFontWeight(ChangeEventArgs e){
        await JsRuntime.InvokeVoidAsync("readFontWeight", e.Value.ToString());
    }

    // ---------- end -------------------------


    // Dark Mode
    private string get_theme { get; set; }
    private bool isThemeSelected(string choice){
        return choice == get_theme;
    }
    
    private async Task ChangeTheme(ChangeEventArgs e) {
        await JsRuntime.InvokeVoidAsync("readTheme", e.Value.ToString());
    }

}


