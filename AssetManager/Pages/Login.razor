@page "/"
@page "/login" 
@using AssetManager.Classes
@using AssetManager.Model
@using System.ComponentModel.DataAnnotations
@inject NavigationManager NavigationManager
@inject CustomAuthenticationProvider AuthStateProvider
@inject Classes.UserModel userModel

@*
test account credentials
    Admin:
    hashadmin@email.com
    hashadminpassword

    User:
    hashtest@email.com
    hashpassword
*@

<div class="main d-flex align-items-center " style="height: 100vh;">
    <div class="container">
        <div class="row row-cols-1 row-cols-sm-2 border border-3 rounded-5 mx-2">

            <div class="col">
                <a href="#"><img src="imgs/sam_head.svg" alt="" width="200px"/></a>

            </div>
            <EditForm Model="@userModel" OnValidSubmit="@SuccessfulLogin">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div>
                    <span class = "text-danger">@LoginMessage</span>
                </div>
                <div class="form-group">
                   <label>Username</label>
                   <InputText type="email" @bind-Value="userModel.email" class="form-control" />
                </div>
                <div class="form-group">
                    <label>Password</label>
                    <InputText id="password" type="password" @bind-Value="userModel.password" class="form-control" />
                </div>
                <div class="form-group mt-1">
                    <button type="submit" class="btn btn-primary w-100">Login</button>
                </div>
                <NavLink href="/User" class="btn btn-link">Register</NavLink>

            </EditForm>            
        </div>
    </div>
</div>


@code {
    
    string LoginMessage;
    int role = 1;
    public async Task SuccessfulLogin() {
        var success = userModel.LoginValidate(out string token);

        if (success && token != null)
        {
            ConnectionDB connection = new ConnectionDB();
            connection.OpenConnection();
            string query = "SELECT role FROM dbo.[user] WHERE email='" + token + "'";
            Microsoft.Data.SqlClient.SqlDataReader dr = connection.DataReader(query);
            while (dr.Read()){
                role = dr.GetInt32(0);
            }

            await AuthStateProvider.Login(token);
            if (role == 0)
                NavigationManager.NavigateTo("/Admin");
            else
                NavigationManager.NavigateTo("/Asset");
        }
        else
            LoginMessage = "Invalid username or password.";          
    }
    protected override async Task OnInitializedAsync(){
        await AuthStateProvider.Logout();
    }
   
    
   
}

