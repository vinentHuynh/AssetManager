@page "/login" 
@using AssetManager.Classes
@using System.ComponentModel.DataAnnotations
@inject NavigationManager NavigationManager
@inject CustomAuthenticationProvider AuthStateProvider

@*
TO-DO
    -validation message
*@

<div class="main d-flex align-items-center " style="height: 100vh;">
    <div class="container">
        <div class="row row-cols-1 row-cols-sm-2 border border-3 rounded-5 mx-2">

            <div class="col">
                <a href="#"><img src="imgs/sam_head.svg" alt="" width="200px"/></a>

            </div>
            <EditForm Model="@userModel" OnValidSubmit="@SuccessfulLogin">
                <DataAnnotationsValidator />
                <ValidationSummary />
 
                <div class="form-group">
                   <label>Username</label>
                   <InputText id="email" @bind-Value="userModel.Username" class="form-control" />
                </div>
                <div class="form-group">
                    <label>Password</label>
                    <InputText id="password" type="password" @bind-Value="userModel.Password" class="form-control" />
                </div>
                <div class="form-group mt-1">
                    <button type="submit" class="btn btn-primary w-100">Login</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    public UserModel userModel = new UserModel();

    public async Task SuccessfulLogin() {
        var success = userModel.LoginValidate(out string token);

        if (!success)
            Console.WriteLine("Request failed.");


        await AuthStateProvider.Login(token);
        if (userModel.Username == "admin@gmail.com")
            NavigationManager.NavigateTo("/Admin");
        else
            NavigationManager.NavigateTo("/Asset");
    }

   /* public bool isAdmin(){
        int role = 1;
        string query = "SELECT role FROM dbo.[user] WHERE email='" + userModel.Username + "'";
        ConnectionDB connection = new ConnectionDB();
        connection.OpenConnection();
        Microsoft.Data.SqlClient.SqlDataReader dr = connection.DataReader(query);
        dr.Read();
        for(int i = 0; i < dr.FieldCount; i++)
            role = dr.GetInt32(i);
        
        if (role == 0)
            return true;
        else
            return false;
    }
    */

    public async void logout(){
        await AuthStateProvider.Logout();
        NavigationManager.NavigateTo("/login");
    }
    
   
}

